diff --git a/src/d8/d8.cc b/src/d8/d8.cc
index 8c3997f24b8..eb4b04aebd3 100644
--- a/src/d8/d8.cc
+++ b/src/d8/d8.cc
@@ -99,6 +99,7 @@
 #endif  // V8_INTL_SUPPORT
 
 #ifdef V8_OS_LINUX
+#include <dlfcn.h>
 #include <sys/mman.h>  // For MultiMappedAllocator.
 #endif
 
@@ -349,6 +350,31 @@ class MultiMappedAllocator : public ArrayBufferAllocatorBase {
 
 #endif  // MULTI_MAPPED_ALLOCATOR_AVAILABLE
 
+class Harness {
+ public:
+  void Prepare() {
+    if (!i::v8_flags.harness) return;
+    harness_handle_ =
+        dlopen(i::v8_flags.harness_lib, RTLD_NOW | RTLD_GLOBAL);
+    harness_begin_ =
+        (void (*)(size_t, ...))dlsym(harness_handle_, "harness_begin");
+    harness_end_ = (void (*)(size_t, ...))dlsym(harness_handle_, "harness_end");
+  }
+  template <typename... Args>
+  void HarnessBegin(Args... args) {
+    harness_begin_(sizeof...(args) >> 1, args...);
+  }
+  template <typename... Args>
+  void HarnessEnd(Args... args) {
+    harness_end_(sizeof...(args) >> 1, args...);
+  }
+
+ private:
+  void* harness_handle_ = nullptr;
+  void (*harness_begin_)(size_t, ...) = nullptr;
+  void (*harness_end_)(size_t, ...) = nullptr;
+} harness;
+
 v8::Platform* g_default_platform;
 std::unique_ptr<v8::Platform> g_platform;
 
@@ -3020,6 +3046,26 @@ void Shell::Version(const v8::FunctionCallbackInfo<v8::Value>& info) {
           .ToLocalChecked());
 }
 
+void Shell::HarnessPrepare(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  harness.Prepare();
+}
+
+void Shell::HarnessBegin(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  if (!i::v8_flags.harness) return;
+  auto isolate = reinterpret_cast<internal::Isolate*>(args.GetIsolate());
+  auto heap = isolate->heap();
+  harness.HarnessBegin("GC", static_cast<double>(heap->gc_count()), "time.stw",
+                       static_cast<double>(heap->total_gc_time_ms()));
+}
+
+void Shell::HarnessEnd(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  if (!i::v8_flags.harness) return;
+  auto isolate = reinterpret_cast<internal::Isolate*>(args.GetIsolate());
+  auto heap = isolate->heap();
+  harness.HarnessEnd("GC", static_cast<double>(heap->gc_count()), "time.stw",
+                     static_cast<double>(heap->total_gc_time_ms()));
+}
+
 #ifdef V8_FUZZILLI
 
 // We have to assume that the fuzzer will be able to call this function e.g. by
@@ -3358,6 +3404,13 @@ Local<ObjectTemplate> Shell::CreateGlobalTemplate(Isolate* isolate) {
   global_template->Set(isolate, "version",
                        FunctionTemplate::New(isolate, Version));
 
+  global_template->Set(isolate, "harnessPrepare",
+                       FunctionTemplate::New(isolate, HarnessPrepare));
+  global_template->Set(isolate, "harnessBegin",
+                       FunctionTemplate::New(isolate, HarnessBegin));
+  global_template->Set(isolate, "harnessEnd",
+                       FunctionTemplate::New(isolate, HarnessEnd));
+
   global_template->Set(isolate, "print", FunctionTemplate::New(isolate, Print));
   global_template->Set(isolate, "printErr",
                        FunctionTemplate::New(isolate, PrintErr));
diff --git a/src/d8/d8.h b/src/d8/d8.h
index c348e18acfc..0d57917c5b3 100644
--- a/src/d8/d8.h
+++ b/src/d8/d8.h
@@ -606,6 +606,9 @@ class Shell : public i::AllStatic {
   static void Quit(const v8::FunctionCallbackInfo<v8::Value>& info);
   static void Terminate(const v8::FunctionCallbackInfo<v8::Value>& info);
   static void Version(const v8::FunctionCallbackInfo<v8::Value>& info);
+  static void HarnessPrepare(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void HarnessBegin(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void HarnessEnd(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void WriteFile(const v8::FunctionCallbackInfo<v8::Value>& info);
   static void ReadFile(const v8::FunctionCallbackInfo<v8::Value>& info);
   static char* ReadChars(const char* name, int* size_out);
diff --git a/src/flags/flag-definitions.h b/src/flags/flag-definitions.h
index 23246111d1f..9afd0d337c9 100644
--- a/src/flags/flag-definitions.h
+++ b/src/flags/flag-definitions.h
@@ -1570,6 +1570,9 @@ DEFINE_BOOL(trace_idle_notification, false,
             "print one trace line following each idle notification")
 DEFINE_BOOL(trace_idle_notification_verbose, false,
             "prints the heap state used by the idle notification")
+DEFINE_BOOL(harness, false, "enable gc harness")
+DEFINE_STRING(harness_lib, "",
+              "specify the dynamically-loaded gc harness library")
 DEFINE_BOOL(trace_gc_verbose, false,
             "print more details following each garbage collection")
 DEFINE_IMPLICATION(trace_gc_verbose, trace_gc)
diff --git a/src/heap/heap.h b/src/heap/heap.h
index 76b860c3378..74662874136 100644
--- a/src/heap/heap.h
+++ b/src/heap/heap.h
@@ -1349,6 +1349,8 @@ class Heap final {
   int gc_count() const { return gc_count_; }
 
   bool is_current_gc_forced() const { return is_current_gc_forced_; }
+ 
+  double total_gc_time_ms() const { return total_gc_time_ms_.InMillisecondsF(); }
 
   GarbageCollector current_or_last_garbage_collector() const {
     return current_or_last_garbage_collector_;
